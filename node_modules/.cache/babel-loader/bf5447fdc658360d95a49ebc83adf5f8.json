{"ast":null,"code":"/**\n * Converts any string to camel-case format.\n * @param   {String}    str           String to convert.\n * @return  {String}                  The formatted string.\n */\nexport var toCamelCase = function toCamelCase(str) {\n  // remove spaces, dashes and underscores from the begining of the string\n  // /^[A-Z]+$/ -> lowercases the string if it's all uppercase\n  var cleanString = str.replace(/[^\\w\\s_-]/g, '').replace(/^[A-Z]+$/, function (w) {\n    return w.toLowerCase();\n  }); // if it's in snakecase, convert it to camelcase\n\n  if (/(.*?)[\\s_-]/.test(cleanString)) {\n    var parts = cleanString.replace(/[\\s_-]|[a-z](?=[A-Z])/g, function (w) {\n      return /[\\s_-]/.test(w) ? ':' : w + \":\";\n    }).split(':');\n    var transformedParts = parts.map(function (w, i) {\n      return i === 0 ? w.toLowerCase() : \"\" + w[0].toUpperCase() + w.slice(1).toLowerCase();\n    });\n    return transformedParts.join('');\n  } // if it's already in camelcase, return it\n\n  if (/([a-z][A-Z])+/.test(cleanString)) {\n    return cleanString;\n  }\n  return cleanString;\n};\n/**\n * Converts any string to snake-case format.\n * @param   {String}    str           String to convert.\n * @return  {String}                  The formatted string.\n */\n\nexport var toSnakeCase = function toSnakeCase(str) {\n  var camelCase = toCamelCase(str);\n  return camelCase.replace(/[a-z](?=[A-Z])/g, function (w) {\n    return w[0] + \"_\";\n  }).toLowerCase();\n};","map":{"version":3,"names":["toCamelCase","str","cleanString","replace","w","toLowerCase","test","parts","split","transformedParts","map","i","toUpperCase","slice","join","toSnakeCase","camelCase"],"sources":["/Users/lohith/Downloads/snarling_hidden_goose-react 2/node_modules/speedux/es/helpers.js"],"sourcesContent":["/**\n * Converts any string to camel-case format.\n * @param   {String}    str           String to convert.\n * @return  {String}                  The formatted string.\n */\nexport var toCamelCase = function toCamelCase(str) {\n  // remove spaces, dashes and underscores from the begining of the string\n  // /^[A-Z]+$/ -> lowercases the string if it's all uppercase\n  var cleanString = str.replace(/[^\\w\\s_-]/g, '').replace(/^[A-Z]+$/, function (w) {\n    return w.toLowerCase();\n  }); // if it's in snakecase, convert it to camelcase\n\n  if (/(.*?)[\\s_-]/.test(cleanString)) {\n    var parts = cleanString.replace(/[\\s_-]|[a-z](?=[A-Z])/g, function (w) {\n      return /[\\s_-]/.test(w) ? ':' : w + \":\";\n    }).split(':');\n    var transformedParts = parts.map(function (w, i) {\n      return i === 0 ? w.toLowerCase() : \"\" + w[0].toUpperCase() + w.slice(1).toLowerCase();\n    });\n    return transformedParts.join('');\n  } // if it's already in camelcase, return it\n\n\n  if (/([a-z][A-Z])+/.test(cleanString)) {\n    return cleanString;\n  }\n\n  return cleanString;\n};\n/**\n * Converts any string to snake-case format.\n * @param   {String}    str           String to convert.\n * @return  {String}                  The formatted string.\n */\n\nexport var toSnakeCase = function toSnakeCase(str) {\n  var camelCase = toCamelCase(str);\n  return camelCase.replace(/[a-z](?=[A-Z])/g, function (w) {\n    return w[0] + \"_\";\n  }).toLowerCase();\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,WAAW,GAAG,SAASA,WAAW,CAACC,GAAG,EAAE;EACjD;EACA;EACA,IAAIC,WAAW,GAAGD,GAAG,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,UAAU,EAAE,UAAUC,CAAC,EAAE;IAC/E,OAAOA,CAAC,CAACC,WAAW,EAAE;EACxB,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI,aAAa,CAACC,IAAI,CAACJ,WAAW,CAAC,EAAE;IACnC,IAAIK,KAAK,GAAGL,WAAW,CAACC,OAAO,CAAC,wBAAwB,EAAE,UAAUC,CAAC,EAAE;MACrE,OAAO,QAAQ,CAACE,IAAI,CAACF,CAAC,CAAC,GAAG,GAAG,GAAGA,CAAC,GAAG,GAAG;IACzC,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IACb,IAAIC,gBAAgB,GAAGF,KAAK,CAACG,GAAG,CAAC,UAAUN,CAAC,EAAEO,CAAC,EAAE;MAC/C,OAAOA,CAAC,KAAK,CAAC,GAAGP,CAAC,CAACC,WAAW,EAAE,GAAG,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW,EAAE,GAAGR,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAACR,WAAW,EAAE;IACvF,CAAC,CAAC;IACF,OAAOI,gBAAgB,CAACK,IAAI,CAAC,EAAE,CAAC;EAClC,CAAC,CAAC;;EAGF,IAAI,eAAe,CAACR,IAAI,CAACJ,WAAW,CAAC,EAAE;IACrC,OAAOA,WAAW;EACpB;EAEA,OAAOA,WAAW;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIa,WAAW,GAAG,SAASA,WAAW,CAACd,GAAG,EAAE;EACjD,IAAIe,SAAS,GAAGhB,WAAW,CAACC,GAAG,CAAC;EAChC,OAAOe,SAAS,CAACb,OAAO,CAAC,iBAAiB,EAAE,UAAUC,CAAC,EAAE;IACvD,OAAOA,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;EACnB,CAAC,CAAC,CAACC,WAAW,EAAE;AAClB,CAAC"},"metadata":{},"sourceType":"module"}