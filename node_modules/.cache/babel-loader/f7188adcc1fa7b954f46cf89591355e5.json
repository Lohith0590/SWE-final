{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport getType from './get-type';\n/**\n * Uses a string path to search for a direct property in an object and return its value or\n * replace it if a new value is provided.\n * @param   {Object}    obj           Object to search.\n * @param   {String}    prop          String that represents the property name.\n * @param   {Boolean}   byRef         Whether or not to return the value by reference.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property. If the\n *                                    provided value is `undefined`, the property will be deleted.\n * @return  {Object}                  Value of the property or a copy of the same object updated\n *                                    with the provided value.\n */\n\nexport var findDirectPropInObject = function findDirectPropInObject(obj, prop, byRef) {\n  if (byRef === void 0) {\n    byRef = false;\n  }\n  var type = getType(obj);\n  var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;\n  var value = arguments.length <= 3 ? undefined : arguments[3]; // cannot work with types other than arrays and objects\n\n  if (type !== 'array' && type !== 'object') {\n    return obj;\n  } // start with a reference to the given object\n\n  var result = obj; // de-reference, if that is required\n\n  if (!byRef) {\n    if (type === 'array') {\n      result = [].concat(obj);\n    }\n    if (type === 'object') {\n      result = _extends({}, obj);\n    }\n  } // handle an empty prop name\n\n  if (prop === '') {\n    if (shouldReplace) {\n      // trying to write to an empty path on an object or an array would\n      // result in the same given object or array\n      return result;\n    } // trying to read an empty path results in 'undefined' value\n\n    return undefined;\n  } // handle a wildcard\n\n  if (prop === '*') {\n    if (shouldReplace) {\n      if (type === 'array') {\n        if (value === undefined) {\n          while (result.length) {\n            findDirectPropInObject(result, 0, true, value);\n          }\n        } else {\n          var _result = result,\n            length = _result.length; // traverse the array end-to-start to make sure splicing\n          // items does not affect the current index\n\n          result.forEach(function (item, index) {\n            var itemIndex = length - 1 - index;\n            var itemValue = value;\n            if (getType(value) === 'function') {\n              itemValue = value(result[itemIndex]);\n            }\n            if (itemValue === undefined) {\n              findDirectPropInObject(result, itemIndex, true, undefined);\n            } else {\n              var newResult = findDirectPropInObject(result, itemIndex, byRef, itemValue);\n              result[itemIndex] = newResult[itemIndex];\n            }\n          });\n        }\n      } else if (type === 'object') {\n        Object.keys(result).forEach(function (key) {\n          return findDirectPropInObject(result, key, true, value);\n        });\n      }\n      return result;\n    } // reading a wildcard on an array would return the values\n    // of the given array\n\n    if (type === 'array') {\n      return result;\n    } // reading a wildcard on an object would return the values\n    // of the given object\n\n    if (type === 'object') {\n      return Object.values(result);\n    }\n  } // handle other values\n\n  if (shouldReplace) {\n    var replaceWith = value;\n    if (getType(replaceWith) === 'function') {\n      replaceWith = replaceWith(result[prop]);\n    } // update the value then return the resulting object\n\n    if (replaceWith === undefined && type === 'array') {\n      result.splice(prop, 1);\n    } else if (replaceWith === undefined && type === 'object') {\n      delete result[prop];\n    } else {\n      result[prop] = replaceWith;\n    }\n    return result;\n  } // return the value of the prop\n\n  return result[prop];\n};\n/**\n * Uses a string path to search for a property in an object and return its value or\n * replace it if a new value is provided.\n * @param   {Object}    obj           Object to search.\n * @param   {String}    pathStr       String that represents the property path.\n *                                    For example: data.entries[0][3].title\n * @param   {Boolean}   byRef         Whether or not to return the value by reference.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property.\n * @return  {Object}                  Value of the property or a copy of the same object updated\n *                                    with the provided value.\n */\n\nexport var findPropInObject = function findPropInObject(obj, pathStr, byRef) {\n  if (byRef === void 0) {\n    byRef = false;\n  }\n  var type = getType(obj);\n  var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;\n  var value = arguments.length <= 3 ? undefined : arguments[3]; // clean and convert the path string into an array\n\n  var path = pathStr.toString().replace(/^\\[|\\]$/g, ''); // remove starting and ending brackets\n\n  path = path.replace(/\\[|\\]/g, '.'); // convert all brackets to dots\n\n  path = path.replace(/\\.{2,}/g, '.'); // remove dot duplications\n\n  path = path.split('.'); // break the string at the dots\n\n  if (path.length === 1) {\n    if (shouldReplace) {\n      return findDirectPropInObject(obj, path[0], byRef, value);\n    }\n    return findDirectPropInObject(obj, path[0], byRef);\n  } // start with a reference to the given object\n\n  var result = obj; // de-reference, if that is required\n\n  if (!byRef) {\n    if (type === 'array') {\n      result = [].concat(obj);\n    }\n    if (type === 'object') {\n      result = _extends({}, obj);\n    }\n  }\n  var prop = path[0];\n  var remainingPath = path.slice(1).join('.');\n  if (shouldReplace) {\n    // if the current path component is a wildcard, each item would have\n    // to be mapped with value returned from the remaining path\n    if (prop === '*') {\n      if (type === 'array') {\n        result.forEach(function (item, index) {\n          result[index] = findPropInObject(item, remainingPath, byRef, value);\n        });\n      }\n      if (type === 'object') {\n        Object.keys(result).forEach(function (key) {\n          result[key] = findPropInObject(result[key], remainingPath, byRef, value);\n        });\n      }\n      return result;\n    }\n    if (typeof result[prop] === 'undefined') {\n      result[prop] = {};\n    }\n    result[prop] = findPropInObject(result[prop], remainingPath, byRef, value);\n    return result;\n  } // if the current path component is a wildcard, each item would have\n  // to be mapped with value returned from the remaining path\n\n  if (prop === '*') {\n    if (type === 'array') {\n      return result.map(function (item) {\n        return findPropInObject(item, remainingPath, byRef);\n      });\n    }\n    if (type === 'object') {\n      return Object.values(result).map(function (item) {\n        return findPropInObject(item, remainingPath, byRef);\n      });\n    }\n  } // the `|| {}` part handles undefined values, it will return `undefined` instead\n  // of throwing an error\n\n  return findPropInObject(result[prop] || {}, remainingPath, byRef);\n};\n/**\n * Queries an object for a specific value using a string path.\n * @param   {String}    query         String that represents the property path.\n *                                    For example: data.entries[0][3].title\n * @param   {Object}    object        Object to query.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property.\n * @return  {Object}                  The object, part of it or a value in the object.\n */\n\nvar queryObject = function queryObject(query, obj) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  // handle query strings\n  if (getType(query) === 'string') {\n    return findPropInObject.apply(void 0, [obj, query, false].concat(args));\n  } // handle query objects\n\n  if (getType(query) === 'object') {\n    return Object.keys(query).reduce(function (prev, next) {\n      var _extends2;\n      return _extends({}, prev, (_extends2 = {}, _extends2[next] = findPropInObject.apply(void 0, [obj, query[next], false].concat(args)), _extends2));\n    }, {});\n  }\n  return obj;\n};\nexport default queryObject;","map":{"version":3,"names":["_extends","getType","findDirectPropInObject","obj","prop","byRef","type","shouldReplace","arguments","length","value","undefined","result","concat","_result","forEach","item","index","itemIndex","itemValue","newResult","Object","keys","key","values","replaceWith","splice","findPropInObject","pathStr","path","toString","replace","split","remainingPath","slice","join","map","queryObject","query","_len","args","Array","_key","apply","reduce","prev","next","_extends2"],"sources":["/Users/lohith/Downloads/snarling_hidden_goose-react 2/node_modules/noyb/es/query-object.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport getType from './get-type';\n/**\n * Uses a string path to search for a direct property in an object and return its value or\n * replace it if a new value is provided.\n * @param   {Object}    obj           Object to search.\n * @param   {String}    prop          String that represents the property name.\n * @param   {Boolean}   byRef         Whether or not to return the value by reference.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property. If the\n *                                    provided value is `undefined`, the property will be deleted.\n * @return  {Object}                  Value of the property or a copy of the same object updated\n *                                    with the provided value.\n */\n\nexport var findDirectPropInObject = function findDirectPropInObject(obj, prop, byRef) {\n  if (byRef === void 0) {\n    byRef = false;\n  }\n\n  var type = getType(obj);\n  var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;\n  var value = arguments.length <= 3 ? undefined : arguments[3]; // cannot work with types other than arrays and objects\n\n  if (type !== 'array' && type !== 'object') {\n    return obj;\n  } // start with a reference to the given object\n\n\n  var result = obj; // de-reference, if that is required\n\n  if (!byRef) {\n    if (type === 'array') {\n      result = [].concat(obj);\n    }\n\n    if (type === 'object') {\n      result = _extends({}, obj);\n    }\n  } // handle an empty prop name\n\n\n  if (prop === '') {\n    if (shouldReplace) {\n      // trying to write to an empty path on an object or an array would\n      // result in the same given object or array\n      return result;\n    } // trying to read an empty path results in 'undefined' value\n\n\n    return undefined;\n  } // handle a wildcard\n\n\n  if (prop === '*') {\n    if (shouldReplace) {\n      if (type === 'array') {\n        if (value === undefined) {\n          while (result.length) {\n            findDirectPropInObject(result, 0, true, value);\n          }\n        } else {\n          var _result = result,\n              length = _result.length; // traverse the array end-to-start to make sure splicing\n          // items does not affect the current index\n\n          result.forEach(function (item, index) {\n            var itemIndex = length - 1 - index;\n            var itemValue = value;\n\n            if (getType(value) === 'function') {\n              itemValue = value(result[itemIndex]);\n            }\n\n            if (itemValue === undefined) {\n              findDirectPropInObject(result, itemIndex, true, undefined);\n            } else {\n              var newResult = findDirectPropInObject(result, itemIndex, byRef, itemValue);\n              result[itemIndex] = newResult[itemIndex];\n            }\n          });\n        }\n      } else if (type === 'object') {\n        Object.keys(result).forEach(function (key) {\n          return findDirectPropInObject(result, key, true, value);\n        });\n      }\n\n      return result;\n    } // reading a wildcard on an array would return the values\n    // of the given array\n\n\n    if (type === 'array') {\n      return result;\n    } // reading a wildcard on an object would return the values\n    // of the given object\n\n\n    if (type === 'object') {\n      return Object.values(result);\n    }\n  } // handle other values\n\n\n  if (shouldReplace) {\n    var replaceWith = value;\n\n    if (getType(replaceWith) === 'function') {\n      replaceWith = replaceWith(result[prop]);\n    } // update the value then return the resulting object\n\n\n    if (replaceWith === undefined && type === 'array') {\n      result.splice(prop, 1);\n    } else if (replaceWith === undefined && type === 'object') {\n      delete result[prop];\n    } else {\n      result[prop] = replaceWith;\n    }\n\n    return result;\n  } // return the value of the prop\n\n\n  return result[prop];\n};\n/**\n * Uses a string path to search for a property in an object and return its value or\n * replace it if a new value is provided.\n * @param   {Object}    obj           Object to search.\n * @param   {String}    pathStr       String that represents the property path.\n *                                    For example: data.entries[0][3].title\n * @param   {Boolean}   byRef         Whether or not to return the value by reference.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property.\n * @return  {Object}                  Value of the property or a copy of the same object updated\n *                                    with the provided value.\n */\n\nexport var findPropInObject = function findPropInObject(obj, pathStr, byRef) {\n  if (byRef === void 0) {\n    byRef = false;\n  }\n\n  var type = getType(obj);\n  var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;\n  var value = arguments.length <= 3 ? undefined : arguments[3]; // clean and convert the path string into an array\n\n  var path = pathStr.toString().replace(/^\\[|\\]$/g, ''); // remove starting and ending brackets\n\n  path = path.replace(/\\[|\\]/g, '.'); // convert all brackets to dots\n\n  path = path.replace(/\\.{2,}/g, '.'); // remove dot duplications\n\n  path = path.split('.'); // break the string at the dots\n\n  if (path.length === 1) {\n    if (shouldReplace) {\n      return findDirectPropInObject(obj, path[0], byRef, value);\n    }\n\n    return findDirectPropInObject(obj, path[0], byRef);\n  } // start with a reference to the given object\n\n\n  var result = obj; // de-reference, if that is required\n\n  if (!byRef) {\n    if (type === 'array') {\n      result = [].concat(obj);\n    }\n\n    if (type === 'object') {\n      result = _extends({}, obj);\n    }\n  }\n\n  var prop = path[0];\n  var remainingPath = path.slice(1).join('.');\n\n  if (shouldReplace) {\n    // if the current path component is a wildcard, each item would have\n    // to be mapped with value returned from the remaining path\n    if (prop === '*') {\n      if (type === 'array') {\n        result.forEach(function (item, index) {\n          result[index] = findPropInObject(item, remainingPath, byRef, value);\n        });\n      }\n\n      if (type === 'object') {\n        Object.keys(result).forEach(function (key) {\n          result[key] = findPropInObject(result[key], remainingPath, byRef, value);\n        });\n      }\n\n      return result;\n    }\n\n    if (typeof result[prop] === 'undefined') {\n      result[prop] = {};\n    }\n\n    result[prop] = findPropInObject(result[prop], remainingPath, byRef, value);\n    return result;\n  } // if the current path component is a wildcard, each item would have\n  // to be mapped with value returned from the remaining path\n\n\n  if (prop === '*') {\n    if (type === 'array') {\n      return result.map(function (item) {\n        return findPropInObject(item, remainingPath, byRef);\n      });\n    }\n\n    if (type === 'object') {\n      return Object.values(result).map(function (item) {\n        return findPropInObject(item, remainingPath, byRef);\n      });\n    }\n  } // the `|| {}` part handles undefined values, it will return `undefined` instead\n  // of throwing an error\n\n\n  return findPropInObject(result[prop] || {}, remainingPath, byRef);\n};\n/**\n * Queries an object for a specific value using a string path.\n * @param   {String}    query         String that represents the property path.\n *                                    For example: data.entries[0][3].title\n * @param   {Object}    object        Object to query.\n * @param   {Any}       value         New value to replace the property with. Omit this\n *                                    parameter if you just want to read the property.\n * @return  {Object}                  The object, part of it or a value in the object.\n */\n\nvar queryObject = function queryObject(query, obj) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  // handle query strings\n  if (getType(query) === 'string') {\n    return findPropInObject.apply(void 0, [obj, query, false].concat(args));\n  } // handle query objects\n\n\n  if (getType(query) === 'object') {\n    return Object.keys(query).reduce(function (prev, next) {\n      var _extends2;\n\n      return _extends({}, prev, (_extends2 = {}, _extends2[next] = findPropInObject.apply(void 0, [obj, query[next], false].concat(args)), _extends2));\n    }, {});\n  }\n\n  return obj;\n};\n\nexport default queryObject;"],"mappings":"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"},"metadata":{},"sourceType":"module"}