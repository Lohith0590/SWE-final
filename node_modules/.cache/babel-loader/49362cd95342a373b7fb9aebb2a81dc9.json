{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/**\n * Dependency imports\n */\nimport { createStore as createReduxStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { queryObject } from 'noyb';\n/**\n * This is not the actual store object. This is a wrapper object\n * that manages the Redux store instance. Use `store.getInstance()`\n * to get a reference to the Redux store.\n */\n\nvar store = {\n  /**\n   * An object that is used as a map to store references to registered\n   * reducers. This object is used by `getRootReducer()` to create the\n   * root reducer for the store.\n   * @type {Object}\n   */\n  reducers: {},\n  /**\n   * List of subscribers listening to dispatched actions\n   */\n  subscribers: {},\n  /**\n   * An array of middlewares to use when creating the store.\n   * Use exported method `useMiddleware()` to add other middleware\n   * functions to this list.\n   * @type {Array}\n   */\n  middlewares: [],\n  /**\n   * An object that is used to build the initial state tree for the\n   * entire app. Each call to `connect()` will add a new key to this\n   * object.\n   * @type {Object}\n   */\n  combinedInitialState: {},\n  /**\n   * Creates a new Redux store instance and updates the reference.\n   */\n  create: function create() {\n    if (this.storeInstance) return this.storeInstance;\n    return this.buildInstance();\n  },\n  /**\n   * Builds a Redux store instance.\n   */\n  buildInstance: function buildInstance() {\n    /* eslint-disable */\n    var devToolsExtension = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (foo) {\n      return foo;\n    };\n    /* eslint-enable */\n\n    this.devTools = this.devTools || compose(devToolsExtension);\n    this.storeInstance = createReduxStore(this.getRootReducer(), compose.apply(void 0, this.middlewares.concat([this.devTools])));\n    return this.storeInstance;\n  },\n  /**\n   * Returns the root reducer function.\n   */\n  getRootReducer: function getRootReducer() {\n    if (this.rootReducer) return this.rootReducer;\n    return this.buildRootReducer();\n  },\n  /**\n   * Combines all registered reducers and returns a single reducer\n   * function.\n   */\n  buildRootReducer: function buildRootReducer() {\n    var _this = this;\n    var reducers = _extends({}, this.reducers);\n    if (Object.keys(reducers).length === 0) {\n      reducers.$_foo = function (state) {\n        if (state === void 0) {\n          state = {};\n        }\n        return state;\n      }; // default reducer\n    }\n\n    var combinedReducers = combineReducers(reducers);\n    this.rootReducer = function (state, action) {\n      if (state === void 0) {\n        state = _this.combinedInitialState;\n      }\n      if (action === void 0) {\n        action = null;\n      }\n\n      // cache the state\n      _this.cachedState = state; // get the new state object\n\n      var newState = combinedReducers(state, action); // update cached state\n\n      _this.cachedState = newState; // notify subscribers\n\n      if (_this.subscribers[action.type]) {\n        _this.subscribers[action.type].forEach(function (callback) {\n          callback(action);\n        });\n      } // return the new state\n\n      return newState;\n    };\n    return this.rootReducer;\n  },\n  /**\n   * Updates the root reducer of the store.\n   */\n  update: function update() {\n    return this.storeInstance.replaceReducer(this.buildRootReducer());\n  },\n  /**\n   * Registers a reducer function.\n   * @param  {String}   key             Reducer unique identifier key\n   * @param  {Function} reducer         Reducer function\n   * @param  {Object}   initialState    Optional initial state for the reducer\n   */\n  useReducer: function useReducer(name, reducer, initialState) {\n    this.reducers[name] = reducer;\n    this.combinedInitialState[name] = initialState;\n  },\n  /**\n   * Unregisters all reducer functions.\n   */\n  resetReducers: function resetReducers() {\n    this.reducers = {};\n    this.combinedInitialState = {};\n  },\n  /**\n   * Subscribe to an action being dispatched.\n   * @param {String} actionType   Type of the action to listen to\n   * @param {Function} listener   Function that should be called when the action is dispatched\n   */\n  subscribe: function subscribe(actionType, listener) {\n    var _this$subscribers$act;\n    this.subscribers[actionType] = (_this$subscribers$act = this.subscribers[actionType]) != null ? _this$subscribers$act : [];\n    if (!this.subscribers[actionType].includes(listener)) {\n      this.subscribers[actionType].push(listener);\n    }\n  },\n  /**\n   * Unsubscribe from an action being dispatched\n   * @param {String} actionType   Type of the action to unsubscribe from\n   * @param {Function} listener   Function that was used to subscribe\n   */\n  unsubscribe: function unsubscribe(actionType, listener) {\n    this.subscribers[actionType] = this.subscribers[actionType].filter(function (subscriber) {\n      return subscriber !== listener;\n    });\n  },\n  /**\n   * Allows registering middleware functions such as Router and other middlewares.\n   * @param {Function} middleware Middleware function to use\n   */\n  useMiddleware: function useMiddleware(middleware) {\n    this.middlewares.unshift(applyMiddleware(middleware));\n  },\n  /**\n   * Removes all registered middlewares.\n   */\n  resetMiddlewares: function resetMiddlewares() {\n    this.middlewares = [];\n  },\n  /**\n   * Resets the store and deletes the instance.\n   */\n  reset: function reset() {\n    this.resetReducers();\n    this.resetMiddlewares();\n    delete this.rootReducer;\n    delete this.storeInstance;\n    delete this.registeredNames;\n    this.cachedState = {};\n  },\n  /**\n   * Returns the complete state object or part of it based on a given query. If the\n   * query parameter is a string that uses dot notation, it will return the resolved\n   * value of the given key. If the query is an object, it will return an object that\n   * has the same structure but contains the resolved values. If the query parameter\n   * is not provided, the complete state object will be returned.\n   * @param   {String|Object}   query   A query string or a query object that represents\n   *                                    part of the state object that needs to be fetched.\n   *                                    This parameter is not required.\n   */\n  getState: function getState(query) {\n    return queryObject(query, this.cachedState);\n  },\n  /**\n   * Returns an reference to the Redux store instance.\n   */\n  getInstance: function getInstance() {\n    return this.storeInstance;\n  },\n  /**\n   * Registers a module name. The registered name must be unique for each component.\n   * @param {String} name Name to register\n   */\n  registerName: function registerName(name) {\n    if (typeof this.registeredNames === 'undefined') {\n      this.registeredNames = {};\n    }\n    if (this.registeredNames[name] === true) {\n      var _console = console,\n        warn = _console.warn;\n      warn(\"Duplicate name: \" + name + \". This name has already been used, please use a different name.\");\n    } else {\n      store.registeredNames[name] = true;\n    }\n  }\n};\nexport default store;","map":{"version":3,"names":["_extends","createStore","createReduxStore","applyMiddleware","compose","combineReducers","queryObject","store","reducers","subscribers","middlewares","combinedInitialState","create","storeInstance","buildInstance","devToolsExtension","window","__REDUX_DEVTOOLS_EXTENSION__","foo","devTools","getRootReducer","apply","concat","rootReducer","buildRootReducer","_this","Object","keys","length","$_foo","state","combinedReducers","action","cachedState","newState","type","forEach","callback","update","replaceReducer","useReducer","name","reducer","initialState","resetReducers","subscribe","actionType","listener","_this$subscribers$act","includes","push","unsubscribe","filter","subscriber","useMiddleware","middleware","unshift","resetMiddlewares","reset","registeredNames","getState","query","getInstance","registerName","_console","console","warn"],"sources":["/Users/lohith/Downloads/snarling_hidden_goose-react 2/node_modules/speedux/es/store.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/**\n * Dependency imports\n */\nimport { createStore as createReduxStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { queryObject } from 'noyb';\n/**\n * This is not the actual store object. This is a wrapper object\n * that manages the Redux store instance. Use `store.getInstance()`\n * to get a reference to the Redux store.\n */\n\nvar store = {\n  /**\n   * An object that is used as a map to store references to registered\n   * reducers. This object is used by `getRootReducer()` to create the\n   * root reducer for the store.\n   * @type {Object}\n   */\n  reducers: {},\n\n  /**\n   * List of subscribers listening to dispatched actions\n   */\n  subscribers: {},\n\n  /**\n   * An array of middlewares to use when creating the store.\n   * Use exported method `useMiddleware()` to add other middleware\n   * functions to this list.\n   * @type {Array}\n   */\n  middlewares: [],\n\n  /**\n   * An object that is used to build the initial state tree for the\n   * entire app. Each call to `connect()` will add a new key to this\n   * object.\n   * @type {Object}\n   */\n  combinedInitialState: {},\n\n  /**\n   * Creates a new Redux store instance and updates the reference.\n   */\n  create: function create() {\n    if (this.storeInstance) return this.storeInstance;\n    return this.buildInstance();\n  },\n\n  /**\n   * Builds a Redux store instance.\n   */\n  buildInstance: function buildInstance() {\n    /* eslint-disable */\n    var devToolsExtension = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (foo) {\n      return foo;\n    };\n    /* eslint-enable */\n\n    this.devTools = this.devTools || compose(devToolsExtension);\n    this.storeInstance = createReduxStore(this.getRootReducer(), compose.apply(void 0, this.middlewares.concat([this.devTools])));\n    return this.storeInstance;\n  },\n\n  /**\n   * Returns the root reducer function.\n   */\n  getRootReducer: function getRootReducer() {\n    if (this.rootReducer) return this.rootReducer;\n    return this.buildRootReducer();\n  },\n\n  /**\n   * Combines all registered reducers and returns a single reducer\n   * function.\n   */\n  buildRootReducer: function buildRootReducer() {\n    var _this = this;\n\n    var reducers = _extends({}, this.reducers);\n\n    if (Object.keys(reducers).length === 0) {\n      reducers.$_foo = function (state) {\n        if (state === void 0) {\n          state = {};\n        }\n\n        return state;\n      }; // default reducer\n\n    }\n\n    var combinedReducers = combineReducers(reducers);\n\n    this.rootReducer = function (state, action) {\n      if (state === void 0) {\n        state = _this.combinedInitialState;\n      }\n\n      if (action === void 0) {\n        action = null;\n      }\n\n      // cache the state\n      _this.cachedState = state; // get the new state object\n\n      var newState = combinedReducers(state, action); // update cached state\n\n      _this.cachedState = newState; // notify subscribers\n\n      if (_this.subscribers[action.type]) {\n        _this.subscribers[action.type].forEach(function (callback) {\n          callback(action);\n        });\n      } // return the new state\n\n\n      return newState;\n    };\n\n    return this.rootReducer;\n  },\n\n  /**\n   * Updates the root reducer of the store.\n   */\n  update: function update() {\n    return this.storeInstance.replaceReducer(this.buildRootReducer());\n  },\n\n  /**\n   * Registers a reducer function.\n   * @param  {String}   key             Reducer unique identifier key\n   * @param  {Function} reducer         Reducer function\n   * @param  {Object}   initialState    Optional initial state for the reducer\n   */\n  useReducer: function useReducer(name, reducer, initialState) {\n    this.reducers[name] = reducer;\n    this.combinedInitialState[name] = initialState;\n  },\n\n  /**\n   * Unregisters all reducer functions.\n   */\n  resetReducers: function resetReducers() {\n    this.reducers = {};\n    this.combinedInitialState = {};\n  },\n\n  /**\n   * Subscribe to an action being dispatched.\n   * @param {String} actionType   Type of the action to listen to\n   * @param {Function} listener   Function that should be called when the action is dispatched\n   */\n  subscribe: function subscribe(actionType, listener) {\n    var _this$subscribers$act;\n\n    this.subscribers[actionType] = (_this$subscribers$act = this.subscribers[actionType]) != null ? _this$subscribers$act : [];\n\n    if (!this.subscribers[actionType].includes(listener)) {\n      this.subscribers[actionType].push(listener);\n    }\n  },\n\n  /**\n   * Unsubscribe from an action being dispatched\n   * @param {String} actionType   Type of the action to unsubscribe from\n   * @param {Function} listener   Function that was used to subscribe\n   */\n  unsubscribe: function unsubscribe(actionType, listener) {\n    this.subscribers[actionType] = this.subscribers[actionType].filter(function (subscriber) {\n      return subscriber !== listener;\n    });\n  },\n\n  /**\n   * Allows registering middleware functions such as Router and other middlewares.\n   * @param {Function} middleware Middleware function to use\n   */\n  useMiddleware: function useMiddleware(middleware) {\n    this.middlewares.unshift(applyMiddleware(middleware));\n  },\n\n  /**\n   * Removes all registered middlewares.\n   */\n  resetMiddlewares: function resetMiddlewares() {\n    this.middlewares = [];\n  },\n\n  /**\n   * Resets the store and deletes the instance.\n   */\n  reset: function reset() {\n    this.resetReducers();\n    this.resetMiddlewares();\n    delete this.rootReducer;\n    delete this.storeInstance;\n    delete this.registeredNames;\n    this.cachedState = {};\n  },\n\n  /**\n   * Returns the complete state object or part of it based on a given query. If the\n   * query parameter is a string that uses dot notation, it will return the resolved\n   * value of the given key. If the query is an object, it will return an object that\n   * has the same structure but contains the resolved values. If the query parameter\n   * is not provided, the complete state object will be returned.\n   * @param   {String|Object}   query   A query string or a query object that represents\n   *                                    part of the state object that needs to be fetched.\n   *                                    This parameter is not required.\n   */\n  getState: function getState(query) {\n    return queryObject(query, this.cachedState);\n  },\n\n  /**\n   * Returns an reference to the Redux store instance.\n   */\n  getInstance: function getInstance() {\n    return this.storeInstance;\n  },\n\n  /**\n   * Registers a module name. The registered name must be unique for each component.\n   * @param {String} name Name to register\n   */\n  registerName: function registerName(name) {\n    if (typeof this.registeredNames === 'undefined') {\n      this.registeredNames = {};\n    }\n\n    if (this.registeredNames[name] === true) {\n      var _console = console,\n          warn = _console.warn;\n      warn(\"Duplicate name: \" + name + \". This name has already been used, please use a different name.\");\n    } else {\n      store.registeredNames[name] = true;\n    }\n  }\n};\nexport default store;"],"mappings":"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"},"metadata":{},"sourceType":"module"}