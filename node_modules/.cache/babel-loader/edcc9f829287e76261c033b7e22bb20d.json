{"ast":null,"code":"/**\n * Dependency imports\n */\nimport { getType, deepCopy } from 'noyb';\n/**\n * Local imports\n */\n\nimport store from './store';\nimport * as helpers from './helpers';\n/**\n * Dispatching normal actions\n * ===\n * Hook that returns a `dispatch` function. This `dispatch` function\n * is used to dispatch normal action objects.\n *\n * dispatch(actionObject);\n *\n * @param   {Object}  actionObject  Normal action object that contains\n *                                  a 'type' property\n * Example:\n * dispatch({ type: 'ADD_ITEM', itemId: 1 });\n *\n *\n *\n * Dispatching defined actions\n * ===\n * Or it can be used to dispatch an action that was defined using the\n * createGlobalState function.\n *\n * dispatch(actionType, ...args);\n *\n * @param   {String}  actionType    Type of the action to be dispatched\n * @param   {*}       args          Arguments to be passed to the action\n *\n * Example:\n * dispatch('cart.addItem', 134, 'Leather belt', '$55');\n *\n *\n *\n * Getting a specific dispatch function\n * ===\n * You can pass the name of the global state to get a dispatch function\n * that works specifically with that piece of state.\n *\n * const dispatch = useDispatch(name);\n *\n * @param   {String}  name          Name of a defined global state\n *\n * Example:\n * const dispatch = useDispatch('cart');\n * dispatch('addItem', 134, 'Leather belt', '$55');\n */\n\nexport default (function (name) {\n  return function () {\n    var action = {};\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (getType(args[0]) === 'object') {\n      action = deepCopy(args[0]);\n    } else if (getType(args[0]) === 'string') {\n      // set the type\n      if (name) {\n        action.type = \"@@\" + name + \"/\" + helpers.toSnakeCase(args[0]).toUpperCase();\n      } else if (/^([^.]*?)\\.([^.]*?)$/.test(args[0])) {\n        var _args$0$split = args[0].split('.'),\n          prefix = _args$0$split[0],\n          actionName = _args$0$split[1];\n        action.type = \"@@\" + prefix + \"/\" + helpers.toSnakeCase(actionName).toUpperCase();\n      } else {\n        action.type = args[0];\n      } // set the payload\n\n      action.payload = {}; // set the args\n\n      if (args.length > 1) {\n        action.args = args.slice(1);\n      }\n    }\n    return store.getInstance().dispatch(action);\n  };\n});","map":{"version":3,"names":["getType","deepCopy","store","helpers","name","action","_len","arguments","length","args","Array","_key","type","toSnakeCase","toUpperCase","test","_args$0$split","split","prefix","actionName","payload","slice","getInstance","dispatch"],"sources":["/Users/lohith/Downloads/snarling_hidden_goose-react 2/node_modules/speedux/es/use-dispatch.js"],"sourcesContent":["/**\n * Dependency imports\n */\nimport { getType, deepCopy } from 'noyb';\n/**\n * Local imports\n */\n\nimport store from './store';\nimport * as helpers from './helpers';\n/**\n * Dispatching normal actions\n * ===\n * Hook that returns a `dispatch` function. This `dispatch` function\n * is used to dispatch normal action objects.\n *\n * dispatch(actionObject);\n *\n * @param   {Object}  actionObject  Normal action object that contains\n *                                  a 'type' property\n * Example:\n * dispatch({ type: 'ADD_ITEM', itemId: 1 });\n *\n *\n *\n * Dispatching defined actions\n * ===\n * Or it can be used to dispatch an action that was defined using the\n * createGlobalState function.\n *\n * dispatch(actionType, ...args);\n *\n * @param   {String}  actionType    Type of the action to be dispatched\n * @param   {*}       args          Arguments to be passed to the action\n *\n * Example:\n * dispatch('cart.addItem', 134, 'Leather belt', '$55');\n *\n *\n *\n * Getting a specific dispatch function\n * ===\n * You can pass the name of the global state to get a dispatch function\n * that works specifically with that piece of state.\n *\n * const dispatch = useDispatch(name);\n *\n * @param   {String}  name          Name of a defined global state\n *\n * Example:\n * const dispatch = useDispatch('cart');\n * dispatch('addItem', 134, 'Leather belt', '$55');\n */\n\nexport default (function (name) {\n  return function () {\n    var action = {};\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (getType(args[0]) === 'object') {\n      action = deepCopy(args[0]);\n    } else if (getType(args[0]) === 'string') {\n      // set the type\n      if (name) {\n        action.type = \"@@\" + name + \"/\" + helpers.toSnakeCase(args[0]).toUpperCase();\n      } else if (/^([^.]*?)\\.([^.]*?)$/.test(args[0])) {\n        var _args$0$split = args[0].split('.'),\n            prefix = _args$0$split[0],\n            actionName = _args$0$split[1];\n\n        action.type = \"@@\" + prefix + \"/\" + helpers.toSnakeCase(actionName).toUpperCase();\n      } else {\n        action.type = args[0];\n      } // set the payload\n\n\n      action.payload = {}; // set the args\n\n      if (args.length > 1) {\n        action.args = args.slice(1);\n      }\n    }\n\n    return store.getInstance().dispatch(action);\n  };\n});"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,MAAM;AACxC;AACA;AACA;;AAEA,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,KAAKC,OAAO,MAAM,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,UAAUC,IAAI,EAAE;EAC9B,OAAO,YAAY;IACjB,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IAC9B;IAEA,IAAIX,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACjCJ,MAAM,GAAGJ,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,MAAM,IAAIT,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACxC;MACA,IAAIL,IAAI,EAAE;QACRC,MAAM,CAACO,IAAI,GAAG,IAAI,GAAGR,IAAI,GAAG,GAAG,GAAGD,OAAO,CAACU,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,CAACK,WAAW,EAAE;MAC9E,CAAC,MAAM,IAAI,sBAAsB,CAACC,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/C,IAAIO,aAAa,GAAGP,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC;UAClCC,MAAM,GAAGF,aAAa,CAAC,CAAC,CAAC;UACzBG,UAAU,GAAGH,aAAa,CAAC,CAAC,CAAC;QAEjCX,MAAM,CAACO,IAAI,GAAG,IAAI,GAAGM,MAAM,GAAG,GAAG,GAAGf,OAAO,CAACU,WAAW,CAACM,UAAU,CAAC,CAACL,WAAW,EAAE;MACnF,CAAC,MAAM;QACLT,MAAM,CAACO,IAAI,GAAGH,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC;;MAGFJ,MAAM,CAACe,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;MAErB,IAAIX,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE;QACnBH,MAAM,CAACI,IAAI,GAAGA,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC;MAC7B;IACF;IAEA,OAAOnB,KAAK,CAACoB,WAAW,EAAE,CAACC,QAAQ,CAAClB,MAAM,CAAC;EAC7C,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}