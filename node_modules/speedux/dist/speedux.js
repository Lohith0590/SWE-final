(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('redux'), require('react-redux'), require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'redux', 'react-redux', 'react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Speedux = {}, global.Redux, global['React Redux'], global.React));
}(this, (function (exports, redux, reactRedux, React) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  /**
   * Returns type of a given object.
   * @param   {Any}       obj           Object to inspect for type.
   * @return  {String}                  Type of the given object.
   */
  var getType = function getType(obj) {
    var typeString = Object.prototype.toString.call(obj);
    return typeString.toLowerCase().replace(/\[object\s|\]/g, '');
  };

  /**
   * Deep-copies an object or an array.
   * @param   {Object|Array}  obj       Object or Array to copy.
   * @return  {Object|Array}            Copied Object or Array.
   */

  var deepCopy = function deepCopy(obj) {
    var type = getType(obj);

    if (type === 'object' || type === 'array') {
      var newObj = type === 'array' ? [] : {};
      Object.keys(obj).forEach(function (key) {
        if (['object', 'array'].includes(getType(obj[key]))) {
          newObj[key] = deepCopy(obj[key]);
        } else {
          newObj[key] = obj[key];
        }
      });
      return newObj;
    }

    return obj;
  };

  /**
   * Uses a string path to search for a direct property in an object and return its value or
   * replace it if a new value is provided.
   * @param   {Object}    obj           Object to search.
   * @param   {String}    prop          String that represents the property name.
   * @param   {Boolean}   byRef         Whether or not to return the value by reference.
   * @param   {Any}       value         New value to replace the property with. Omit this
   *                                    parameter if you just want to read the property. If the
   *                                    provided value is `undefined`, the property will be deleted.
   * @return  {Object}                  Value of the property or a copy of the same object updated
   *                                    with the provided value.
   */

  var findDirectPropInObject = function findDirectPropInObject(obj, prop, byRef) {
    if (byRef === void 0) {
      byRef = false;
    }

    var type = getType(obj);
    var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;
    var value = arguments.length <= 3 ? undefined : arguments[3]; // cannot work with types other than arrays and objects

    if (type !== 'array' && type !== 'object') {
      return obj;
    } // start with a reference to the given object


    var result = obj; // de-reference, if that is required

    if (!byRef) {
      if (type === 'array') {
        result = [].concat(obj);
      }

      if (type === 'object') {
        result = _extends({}, obj);
      }
    } // handle an empty prop name


    if (prop === '') {
      if (shouldReplace) {
        // trying to write to an empty path on an object or an array would
        // result in the same given object or array
        return result;
      } // trying to read an empty path results in 'undefined' value


      return undefined;
    } // handle a wildcard


    if (prop === '*') {
      if (shouldReplace) {
        if (type === 'array') {
          if (value === undefined) {
            while (result.length) {
              findDirectPropInObject(result, 0, true, value);
            }
          } else {
            var _result = result,
                length = _result.length; // traverse the array end-to-start to make sure splicing
            // items does not affect the current index

            result.forEach(function (item, index) {
              var itemIndex = length - 1 - index;
              var itemValue = value;

              if (getType(value) === 'function') {
                itemValue = value(result[itemIndex]);
              }

              if (itemValue === undefined) {
                findDirectPropInObject(result, itemIndex, true, undefined);
              } else {
                var newResult = findDirectPropInObject(result, itemIndex, byRef, itemValue);
                result[itemIndex] = newResult[itemIndex];
              }
            });
          }
        } else if (type === 'object') {
          Object.keys(result).forEach(function (key) {
            return findDirectPropInObject(result, key, true, value);
          });
        }

        return result;
      } // reading a wildcard on an array would return the values
      // of the given array


      if (type === 'array') {
        return result;
      } // reading a wildcard on an object would return the values
      // of the given object


      if (type === 'object') {
        return Object.values(result);
      }
    } // handle other values


    if (shouldReplace) {
      var replaceWith = value;

      if (getType(replaceWith) === 'function') {
        replaceWith = replaceWith(result[prop]);
      } // update the value then return the resulting object


      if (replaceWith === undefined && type === 'array') {
        result.splice(prop, 1);
      } else if (replaceWith === undefined && type === 'object') {
        delete result[prop];
      } else {
        result[prop] = replaceWith;
      }

      return result;
    } // return the value of the prop


    return result[prop];
  };
  /**
   * Uses a string path to search for a property in an object and return its value or
   * replace it if a new value is provided.
   * @param   {Object}    obj           Object to search.
   * @param   {String}    pathStr       String that represents the property path.
   *                                    For example: data.entries[0][3].title
   * @param   {Boolean}   byRef         Whether or not to return the value by reference.
   * @param   {Any}       value         New value to replace the property with. Omit this
   *                                    parameter if you just want to read the property.
   * @return  {Object}                  Value of the property or a copy of the same object updated
   *                                    with the provided value.
   */

  var findPropInObject = function findPropInObject(obj, pathStr, byRef) {
    if (byRef === void 0) {
      byRef = false;
    }

    var type = getType(obj);
    var shouldReplace = (arguments.length <= 3 ? 0 : arguments.length - 3) > 0;
    var value = arguments.length <= 3 ? undefined : arguments[3]; // clean and convert the path string into an array

    var path = pathStr.toString().replace(/^\[|\]$/g, ''); // remove starting and ending brackets

    path = path.replace(/\[|\]/g, '.'); // convert all brackets to dots

    path = path.replace(/\.{2,}/g, '.'); // remove dot duplications

    path = path.split('.'); // break the string at the dots

    if (path.length === 1) {
      if (shouldReplace) {
        return findDirectPropInObject(obj, path[0], byRef, value);
      }

      return findDirectPropInObject(obj, path[0], byRef);
    } // start with a reference to the given object


    var result = obj; // de-reference, if that is required

    if (!byRef) {
      if (type === 'array') {
        result = [].concat(obj);
      }

      if (type === 'object') {
        result = _extends({}, obj);
      }
    }

    var prop = path[0];
    var remainingPath = path.slice(1).join('.');

    if (shouldReplace) {
      // if the current path component is a wildcard, each item would have
      // to be mapped with value returned from the remaining path
      if (prop === '*') {
        if (type === 'array') {
          result.forEach(function (item, index) {
            result[index] = findPropInObject(item, remainingPath, byRef, value);
          });
        }

        if (type === 'object') {
          Object.keys(result).forEach(function (key) {
            result[key] = findPropInObject(result[key], remainingPath, byRef, value);
          });
        }

        return result;
      }

      if (typeof result[prop] === 'undefined') {
        result[prop] = {};
      }

      result[prop] = findPropInObject(result[prop], remainingPath, byRef, value);
      return result;
    } // if the current path component is a wildcard, each item would have
    // to be mapped with value returned from the remaining path


    if (prop === '*') {
      if (type === 'array') {
        return result.map(function (item) {
          return findPropInObject(item, remainingPath, byRef);
        });
      }

      if (type === 'object') {
        return Object.values(result).map(function (item) {
          return findPropInObject(item, remainingPath, byRef);
        });
      }
    } // the `|| {}` part handles undefined values, it will return `undefined` instead
    // of throwing an error


    return findPropInObject(result[prop] || {}, remainingPath, byRef);
  };
  /**
   * Queries an object for a specific value using a string path.
   * @param   {String}    query         String that represents the property path.
   *                                    For example: data.entries[0][3].title
   * @param   {Object}    object        Object to query.
   * @param   {Any}       value         New value to replace the property with. Omit this
   *                                    parameter if you just want to read the property.
   * @return  {Object}                  The object, part of it or a value in the object.
   */

  var queryObject = function queryObject(query, obj) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    // handle query strings
    if (getType(query) === 'string') {
      return findPropInObject.apply(void 0, [obj, query, false].concat(args));
    } // handle query objects


    if (getType(query) === 'object') {
      return Object.keys(query).reduce(function (prev, next) {
        var _extends2;

        return _extends({}, prev, (_extends2 = {}, _extends2[next] = findPropInObject.apply(void 0, [obj, query[next], false].concat(args)), _extends2));
      }, {});
    }

    return obj;
  };

  /**
   * Updates an object by merging a fragment object into it.
   * @param   {Object}  objA    Object to update.
   * @param   {Object}  objB    Fragment object.
   * @return  {Object}          The updated object.
   */

  var mergeObjects = function mergeObjects(objA, objB) {
    return Object.keys(objB).reduce(function (prev, next) {
      return findPropInObject(prev, next, false, objB[next]);
    }, _extends({}, objA));
  };

  /**
   * This is not the actual store object. This is a wrapper object
   * that manages the Redux store instance. Use `store.getInstance()`
   * to get a reference to the Redux store.
   */

  var store = {
    /**
     * An object that is used as a map to store references to registered
     * reducers. This object is used by `getRootReducer()` to create the
     * root reducer for the store.
     * @type {Object}
     */
    reducers: {},

    /**
     * List of subscribers listening to dispatched actions
     */
    subscribers: {},

    /**
     * An array of middlewares to use when creating the store.
     * Use exported method `useMiddleware()` to add other middleware
     * functions to this list.
     * @type {Array}
     */
    middlewares: [],

    /**
     * An object that is used to build the initial state tree for the
     * entire app. Each call to `connect()` will add a new key to this
     * object.
     * @type {Object}
     */
    combinedInitialState: {},

    /**
     * Creates a new Redux store instance and updates the reference.
     */
    create: function create() {
      if (this.storeInstance) return this.storeInstance;
      return this.buildInstance();
    },

    /**
     * Builds a Redux store instance.
     */
    buildInstance: function buildInstance() {
      /* eslint-disable */
      var devToolsExtension = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (foo) {
        return foo;
      };
      /* eslint-enable */

      this.devTools = this.devTools || redux.compose(devToolsExtension);
      this.storeInstance = redux.createStore(this.getRootReducer(), redux.compose.apply(void 0, this.middlewares.concat([this.devTools])));
      return this.storeInstance;
    },

    /**
     * Returns the root reducer function.
     */
    getRootReducer: function getRootReducer() {
      if (this.rootReducer) return this.rootReducer;
      return this.buildRootReducer();
    },

    /**
     * Combines all registered reducers and returns a single reducer
     * function.
     */
    buildRootReducer: function buildRootReducer() {
      var _this = this;

      var reducers = _extends({}, this.reducers);

      if (Object.keys(reducers).length === 0) {
        reducers.$_foo = function (state) {
          if (state === void 0) {
            state = {};
          }

          return state;
        }; // default reducer

      }

      var combinedReducers = redux.combineReducers(reducers);

      this.rootReducer = function (state, action) {
        if (state === void 0) {
          state = _this.combinedInitialState;
        }

        if (action === void 0) {
          action = null;
        }

        // cache the state
        _this.cachedState = state; // get the new state object

        var newState = combinedReducers(state, action); // update cached state

        _this.cachedState = newState; // notify subscribers

        if (_this.subscribers[action.type]) {
          _this.subscribers[action.type].forEach(function (callback) {
            callback(action);
          });
        } // return the new state


        return newState;
      };

      return this.rootReducer;
    },

    /**
     * Updates the root reducer of the store.
     */
    update: function update() {
      return this.storeInstance.replaceReducer(this.buildRootReducer());
    },

    /**
     * Registers a reducer function.
     * @param  {String}   key             Reducer unique identifier key
     * @param  {Function} reducer         Reducer function
     * @param  {Object}   initialState    Optional initial state for the reducer
     */
    useReducer: function useReducer(name, reducer, initialState) {
      this.reducers[name] = reducer;
      this.combinedInitialState[name] = initialState;
    },

    /**
     * Unregisters all reducer functions.
     */
    resetReducers: function resetReducers() {
      this.reducers = {};
      this.combinedInitialState = {};
    },

    /**
     * Subscribe to an action being dispatched.
     * @param {String} actionType   Type of the action to listen to
     * @param {Function} listener   Function that should be called when the action is dispatched
     */
    subscribe: function subscribe(actionType, listener) {
      var _this$subscribers$act;

      this.subscribers[actionType] = (_this$subscribers$act = this.subscribers[actionType]) != null ? _this$subscribers$act : [];

      if (!this.subscribers[actionType].includes(listener)) {
        this.subscribers[actionType].push(listener);
      }
    },

    /**
     * Unsubscribe from an action being dispatched
     * @param {String} actionType   Type of the action to unsubscribe from
     * @param {Function} listener   Function that was used to subscribe
     */
    unsubscribe: function unsubscribe(actionType, listener) {
      this.subscribers[actionType] = this.subscribers[actionType].filter(function (subscriber) {
        return subscriber !== listener;
      });
    },

    /**
     * Allows registering middleware functions such as Router and other middlewares.
     * @param {Function} middleware Middleware function to use
     */
    useMiddleware: function useMiddleware(middleware) {
      this.middlewares.unshift(redux.applyMiddleware(middleware));
    },

    /**
     * Removes all registered middlewares.
     */
    resetMiddlewares: function resetMiddlewares() {
      this.middlewares = [];
    },

    /**
     * Resets the store and deletes the instance.
     */
    reset: function reset() {
      this.resetReducers();
      this.resetMiddlewares();
      delete this.rootReducer;
      delete this.storeInstance;
      delete this.registeredNames;
      this.cachedState = {};
    },

    /**
     * Returns the complete state object or part of it based on a given query. If the
     * query parameter is a string that uses dot notation, it will return the resolved
     * value of the given key. If the query is an object, it will return an object that
     * has the same structure but contains the resolved values. If the query parameter
     * is not provided, the complete state object will be returned.
     * @param   {String|Object}   query   A query string or a query object that represents
     *                                    part of the state object that needs to be fetched.
     *                                    This parameter is not required.
     */
    getState: function getState(query) {
      return queryObject(query, this.cachedState);
    },

    /**
     * Returns an reference to the Redux store instance.
     */
    getInstance: function getInstance() {
      return this.storeInstance;
    },

    /**
     * Registers a module name. The registered name must be unique for each component.
     * @param {String} name Name to register
     */
    registerName: function registerName(name) {
      if (typeof this.registeredNames === 'undefined') {
        this.registeredNames = {};
      }

      if (this.registeredNames[name] === true) {
        var _console = console,
            warn = _console.warn;
        warn("Duplicate name: " + name + ". This name has already been used, please use a different name.");
      } else {
        store.registeredNames[name] = true;
      }
    }
  };

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime_1 = createCommonjsModule(function (module) {
  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  /**
   * Converts any string to camel-case format.
   * @param   {String}    str           String to convert.
   * @return  {String}                  The formatted string.
   */
  var toCamelCase = function toCamelCase(str) {
    // remove spaces, dashes and underscores from the begining of the string
    // /^[A-Z]+$/ -> lowercases the string if it's all uppercase
    var cleanString = str.replace(/[^\w\s_-]/g, '').replace(/^[A-Z]+$/, function (w) {
      return w.toLowerCase();
    }); // if it's in snakecase, convert it to camelcase

    if (/(.*?)[\s_-]/.test(cleanString)) {
      var parts = cleanString.replace(/[\s_-]|[a-z](?=[A-Z])/g, function (w) {
        return /[\s_-]/.test(w) ? ':' : w + ":";
      }).split(':');
      var transformedParts = parts.map(function (w, i) {
        return i === 0 ? w.toLowerCase() : "" + w[0].toUpperCase() + w.slice(1).toLowerCase();
      });
      return transformedParts.join('');
    } // if it's already in camelcase, return it


    if (/([a-z][A-Z])+/.test(cleanString)) {
      return cleanString;
    }

    return cleanString;
  };
  /**
   * Converts any string to snake-case format.
   * @param   {String}    str           String to convert.
   * @return  {String}                  The formatted string.
   */

  var toSnakeCase = function toSnakeCase(str) {
    var camelCase = toCamelCase(str);
    return camelCase.replace(/[a-z](?=[A-Z])/g, function (w) {
      return w[0] + "_";
    }).toLowerCase();
  };

  /**
   * Dependency imports
   */
  /**
   * Dispatching normal actions
   * ===
   * Hook that returns a `dispatch` function. This `dispatch` function
   * is used to dispatch normal action objects.
   *
   * dispatch(actionObject);
   *
   * @param   {Object}  actionObject  Normal action object that contains
   *                                  a 'type' property
   * Example:
   * dispatch({ type: 'ADD_ITEM', itemId: 1 });
   *
   *
   *
   * Dispatching defined actions
   * ===
   * Or it can be used to dispatch an action that was defined using the
   * createGlobalState function.
   *
   * dispatch(actionType, ...args);
   *
   * @param   {String}  actionType    Type of the action to be dispatched
   * @param   {*}       args          Arguments to be passed to the action
   *
   * Example:
   * dispatch('cart.addItem', 134, 'Leather belt', '$55');
   *
   *
   *
   * Getting a specific dispatch function
   * ===
   * You can pass the name of the global state to get a dispatch function
   * that works specifically with that piece of state.
   *
   * const dispatch = useDispatch(name);
   *
   * @param   {String}  name          Name of a defined global state
   *
   * Example:
   * const dispatch = useDispatch('cart');
   * dispatch('addItem', 134, 'Leather belt', '$55');
   */

  var useDispatch = (function (name) {
    return function () {
      var action = {};

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (getType(args[0]) === 'object') {
        action = deepCopy(args[0]);
      } else if (getType(args[0]) === 'string') {
        // set the type
        if (name) {
          action.type = "@@" + name + "/" + toSnakeCase(args[0]).toUpperCase();
        } else if (/^([^.]*?)\.([^.]*?)$/.test(args[0])) {
          var _args$0$split = args[0].split('.'),
              prefix = _args$0$split[0],
              actionName = _args$0$split[1];

          action.type = "@@" + prefix + "/" + toSnakeCase(actionName).toUpperCase();
        } else {
          action.type = args[0];
        } // set the payload


        action.payload = {}; // set the args

        if (args.length > 1) {
          action.args = args.slice(1);
        }
      }

      return store.getInstance().dispatch(action);
    };
  });

  /**
   * Dependency imports
   */
  var useGlobalState = (function (query) {
    return reactRedux.useSelector(function (globalState) {
      return query ? queryObject(query, globalState) : globalState;
    });
  });

  /**
   * An object that maps actions to their respective handlers
   * as described in configuration objects which are passed to
   * the createGlobalState function.
   */
  var lookbook = {
    actions: {},
    handlers: {}
  };

  /**
   * Local imports
   */
  var _useActions = (function (name) {
    var actions = {};
    var dispatch = useDispatch(name);

    if (lookbook.actions[name]) {
      Object.keys(lookbook.actions[name]).forEach(function (actionName) {
        actions[actionName] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return new Promise(function (resolve) {
            var actionType = "@@" + name + "/" + toSnakeCase(actionName).toUpperCase() + "/COMPLETE";

            var listener = function listener() {
              store.unsubscribe(actionType, listener);
              resolve();
            };

            store.subscribe(actionType, listener);
            dispatch.apply(void 0, [actionName].concat(args));
          });
        };
      });
    }

    return actions;
  });

  /**
   * Error messages map
   */

  var ERRORS = {
    MISSING_CONFIG: 'Configuration object is required.',
    INVALID_CONFIG: 'Configuration must be a valid object.',
    MISSING_NAME: 'Missing required field `name` for the global state.',
    INVALID_NAME: 'Name must be a string.'
  };
  var createReducer = function createReducer(name, initialState) {
    if (initialState === void 0) {
      initialState = {};
    }

    var reducer = function reducer(prevState, action) {
      var state = prevState != null ? prevState : initialState;
      var actionParts = []; // [actionPrefix, mainAction, subAction]

      if (action.subtype) {
        if (/@@(.+?)\/(.+)/.test(action.type)) {
          var actionSuffix = action.type.replace(/^.*?(\/|$)/, '');
          actionParts[0] = action.type.replace(/^@@|\/.*?$/g, '');

          var _actionSuffix$split = actionSuffix.split('/');

          actionParts[1] = _actionSuffix$split[0];
          actionParts[2] = _actionSuffix$split[1];
        } else {
          var _action$type$split = action.type.split('/');

          actionParts[1] = _action$type$split[0];
          actionParts[2] = _action$type$split[1];
        }

        if (actionParts[2] !== 'UPDATE') {
          return state;
        }
      } else if (/@@(.+?)\/(.+)/.test(action.type)) {
        actionParts[0] = action.type.replace(/^@@|\/.*?$/g, '');
        actionParts[1] = action.type.replace(/^.*?(\/|$)/, '');
      } else {
        var _action$type$split2 = action.type.split('/');

        actionParts[1] = _action$type$split2[0];
        actionParts[2] = _action$type$split2[1];
      }

      var callback = lookbook.actions[name][toCamelCase(actionParts[1])];
      var callbackType = callback ? 'action' : false;

      if (!callback) {
        var _handlers$actionParts;

        var handlers = lookbook.handlers[name];
        callback = (_handlers$actionParts = handlers[actionParts[1]]) != null ? _handlers$actionParts : handlers[actionParts[0] + "." + toCamelCase(actionParts[1])];
        callbackType = callback ? 'handler' : false;
      }

      if (callback) {
        var callbackArgs = {
          action: action.args,
          handler: [action]
        }[callbackType];
        var callbackResult = action.subtype ? action.value : callback.apply(void 0, callbackArgs);
        var callbackResultType = getType(callbackResult);
        var stateFragment = {};

        if (callbackResult && typeof callbackResult[Symbol.iterator] === 'function' && typeof callbackResult.next === 'function') {
          var dispatchSubAction = function dispatchSubAction(type, value, cb) {
            requestAnimationFrame(function () {
              var dispatch = useDispatch();
              dispatch({
                type: action.type + "/" + type,
                value: value,
                subtype: true
              });
              cb();
            });
          };

          var execute = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(data) {
              var next;
              return regenerator.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      next = callbackResult.next(data);

                      if (next.value instanceof Promise) {
                        next.value.then(function (resolvedValue) {
                          dispatchSubAction('RESOLVE', resolvedValue, function () {
                            if (!next.done) execute(resolvedValue);
                          });
                        })["catch"](function (err) {
                          dispatchSubAction('ERROR', err.message, function () {
                            if (!next.done) execute(err);
                          });
                        });
                      } else {
                        dispatchSubAction(next.done ? 'COMPLETE' : 'UPDATE', next.value, function () {
                          if (!next.done) execute(next.value);
                        });
                      }

                    case 2:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function execute(_x) {
              return _ref.apply(this, arguments);
            };
          }();

          execute();
          return state;
        }

        if (callbackResultType === 'object') {
          stateFragment = callbackResult;
        }

        if (callbackResultType === 'function') {
          stateFragment = callbackResult(state);
        }

        return mergeObjects(state, stateFragment);
      }

      return state;
    };

    store.useReducer(name, reducer, initialState);
    store.update();
  };
  var create = (function (config) {
    if (!config) {
      throw new Error(ERRORS.MISSING_CONFIG);
    }

    var name = config.name,
        _config$state = config.state,
        state = _config$state === void 0 ? {} : _config$state,
        _config$actions = config.actions,
        actions = _config$actions === void 0 ? {} : _config$actions,
        _config$handlers = config.handlers,
        handlers = _config$handlers === void 0 ? {} : _config$handlers;

    if (getType(config) !== 'object') {
      throw new Error(ERRORS.INVALID_CONFIG);
    }

    if (!name) {
      throw new Error(ERRORS.MISSING_NAME);
    }

    if (getType(name) !== 'string') {
      throw new Error(ERRORS.INVALID_NAME);
    }

    store.registerName(name);
    lookbook.actions[name] = actions;
    lookbook.handlers[name] = handlers;
    createReducer(name, state);
    return {
      useState: function useState(query) {
        return useGlobalState(query ? name + "." + query : name);
      },
      useActions: function useActions() {
        return _useActions(name);
      }
    };
  });

  /**
   * Dependency imports
   */
  var useHandler = (function (actionType, handler) {
    var targetActionType = actionType;

    if (/^(.*?)\.(.*?)$/.test(actionType)) {
      var _actionType$split = actionType.split('.'),
          actionPrefix = _actionType$split[0],
          actionSuffix = _actionType$split[1];

      targetActionType = "@@" + actionPrefix + "/" + toSnakeCase(actionSuffix).toUpperCase();
    }

    React.useEffect(function () {
      store.subscribe(targetActionType, handler);
      return function () {
        store.unsubscribe(targetActionType, handler);
      };
    }, []);
  });

  /**
   * Dependency imports
   */
  /**
   * useAsync
   */

  var useAsync = (function (generatorFunction, initialState) {
    var state = React.useRef(initialState);
    var argsRef = React.useRef([]);
    var iterator = React.useRef();
    var hasError = React.useRef(false);
    var promiseResolve = React.useRef();
    var promiseReject = React.useRef();
    var nextValue = React.useRef();

    var _useState = React.useState(),
        nextResult = _useState[0],
        setNextResult = _useState[1];

    var iterate = function iterate() {
      if (iterator.current === undefined) {
        iterator.current = generatorFunction.apply(void 0, arguments);
      }

      var next = iterator.current.next(nextValue.current);

      var checkForNextResult = function checkForNextResult() {
        if (!next.done) {
          setNextResult(next);
        } else {
          if (hasError.current !== false && promiseReject.current) {
            promiseReject.current(hasError.current);
          } else if (promiseResolve.current) {
            promiseResolve.current(state.current);
          }

          iterator.current = undefined;
        }
      };

      if (next.value instanceof Promise) {
        next.value.then(function (resolvedValue) {
          nextValue.current = resolvedValue;
        })["catch"](function (err) {
          nextValue.current = err;
          hasError.current = err;
        })["finally"](checkForNextResult);
      } else {
        if (getType(state.current) === 'object') {
          var _next$value;

          state.current = mergeObjects(state.current, (_next$value = next.value) != null ? _next$value : {});
        } else {
          state.current = next.value;
        }

        checkForNextResult();
      }
    };

    var cancel = function cancel() {
      if (iterator.current) iterator.current["return"]();
    };

    var execute = function execute() {
      cancel();

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      argsRef.current = args;
      return new Promise(function (resolve, reject) {
        promiseResolve.current = resolve;
        promiseReject.current = reject;
        iterate.apply(void 0, argsRef.current);
      });
    };

    React.useEffect(function () {
      if (nextResult) iterate.apply(void 0, argsRef.current);
    }, [nextResult]);
    return [state.current, execute, cancel];
  });

  /**
   * Wrapper component for react-redux Provider with the store already passed in.
   */

  var Provider = function Provider(props) {
    return /*#__PURE__*/React__default['default'].createElement(reactRedux.Provider, _extends({
      store: store.create()
    }, props));
  };

  Provider.displayName = 'withStore(Provider)';

  /**
   * Local imports
   */
  var useReducer = function useReducer() {
    store.useReducer.apply(store, arguments);
    store.update();
  };
  var useMiddleware = function useMiddleware() {
    return store.useMiddleware.apply(store, arguments);
  };
  var queryGlobalState = function queryGlobalState(query) {
    return store.getState(query);
  };
  store.create();

  exports.Provider = Provider;
  exports.createGlobalState = create;
  exports.queryGlobalState = queryGlobalState;
  exports.store = store;
  exports.useActions = _useActions;
  exports.useAsync = useAsync;
  exports.useDispatch = useDispatch;
  exports.useGenerator = useAsync;
  exports.useGlobalState = useGlobalState;
  exports.useHandler = useHandler;
  exports.useMiddleware = useMiddleware;
  exports.useReducer = useReducer;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
